[ { "title": "Redis哨兵挂了，Redis 还能正常工作吗？", "url": "/posts/Redis-%E5%93%A8%E5%85%B5%E6%8C%82%E4%BA%86-redis-%E8%BF%98%E8%83%BD%E6%AD%A3%E5%B8%B8%E5%B7%A5%E4%BD%9C%E5%90%97/", "categories": "数据库, Redis", "tags": "Redis", "date": "2021-09-16 15:50:00 +0800", "snippet": "redis 主挂掉了，怎么将请求转移到从上去，如果从是多个，从是怎么进行选举的呢？那么就要看我们今天的主角了，redis哨兵，redis哨兵能够帮助我们自动的完成选主和故障转移操作。redis哨兵都干了什么redis哨兵是一个运行的特殊的redis进程，他主要有三个使命： 监控 选主 通知监控的是什么哨兵主要是监听主库和从库是否存活，怎么进行监控？ 哨兵会定期的给从库发送PING命令，如果从库没有在设定的时间内回复哨兵，那么就会认为从库下线了。哨兵也会定期的给主库发送PING命令进行通信，如果主库也没有在设定的时间内回复哨兵，那么就会认为主库也“下线了”。【注意我这里只是为了说明下..." }, { "title": "HTTP与TCP的keep-alive的区别", "url": "/posts/HTTP%E4%B8%8ETCP%E7%9A%84keep-alive%E7%9A%84%E5%8C%BA%E5%88%AB/", "categories": "网络, HTTP", "tags": "HTTP, TCP", "date": "2021-09-16 15:20:00 +0800", "snippet": "TCP 的 Keepalive 和 HTTP 的 Keep-Alive 是一个东西吗？事实上，这两个完全是两样不同东西，实现的层面也不同： HTTP 的 Keep-Alive，是由应用层（用户态） 实现的，称为 HTTP 长连接； TCP 的 Keepalive，是由 TCP 层（内核态） 实现的，称为 TCP 保活机制； 接下来，分别说说它们。HTTP 的 Keep-AliveHTTP 协议采用的是「请求-应答」的模式，也就是客户端发起了请求，服务端才会返回响应，一来一回这样子。请求-应答由于 HTTP 是基于 TCP 传输协议实现的，客户端与服务端要进行 H..." }, { "title": "JMeter之beanshell断言实例", "url": "/posts/jmeter%E4%B9%8Bbeanshell%E6%96%AD%E8%A8%80%E5%AE%9E%E4%BE%8B/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-15 11:36:00 +0800", "snippet": "1.首先储存一个接口的响应结果，比如在http请求的后面添加beanshell后置处理器(BeanShell PostProcessor)来储存http请求的响应结果：import org.json.*;//获取上一个请求的返回值String response = prev.getResponseDataAsString();//将返回值转换为jsonJSONObject responseJson = new JSONObject(response);//获取responseMessageString message = responseJson.getString(&quot;resp..." }, { "title": "Jmeter 中 CSV 如何参数化测试数据并实现自动断言", "url": "/posts/Jmeter-%E4%B8%AD-CSV-%E5%A6%82%E4%BD%95%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%96%AD%E8%A8%80/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 13:21:00 +0800", "snippet": "当我们使用Jmeter工具进行接口测试，可利用CSV Data Set Config配置元件，对测试数据进行参数化，循环读取csv文档中每一行测试用例数据，来实现接口自动化。此种情况下，很多测试工程师只会人工地查看响应结果来判断用例是否通过。 其实我们同样可利用CSV Data Set Config来帮助我们实现自动断言。 思路：将每一条用例的预期结果一并保存在csv文档中，循环读取文档中的期望结果，来跟实际运行的结果进行一致性判断，高效实现接口自动化。示例：1、整理测试数据及预期结果的CSV文档比如当前要去测试一个注册接口，先来分析下注册传入哪些参数，有包括手机号码mobile..." }, { "title": "Jmeter之JSON提取器应用", "url": "/posts/Jmeter%E4%B9%8BJSON%E6%8F%90%E5%8F%96%E5%99%A8%E5%BA%94%E7%94%A8/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 11:32:00 +0800", "snippet": "在接口测试中有一个这样的场景：登录之后，需要进行昵称修改，怎么实现？首先我们分别看下登录、昵称修改的接口说明：以上业务中补充一点，昵称修改，还需要添加请求头Authorization传登录获取的token值。分析：登录之后的响应结果中会返回用户id、token信息; 而更新昵称需要传参member_id、且需要请求头传token；也就是我们要想办法从“登录”的响应结果中获取到id、token信息，再去传给“更新昵称”请求。因为返回数据格式是json，所以我们用JSON提取器来实现。用正则表达式提取器也可以，大家可参见我之前写的文章。一、json提取器设置多个变量获取多个数据1、先添加好登..." }, { "title": "Jmeter查看结果树之查看响应的13种方法", "url": "/posts/Jmeter%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C%E6%A0%91%E4%B9%8B%E6%9F%A5%E7%9C%8B%E5%93%8D%E5%BA%94%E7%9A%8413%E7%A7%8D%E6%96%B9%E6%B3%95/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 11:24:00 +0800", "snippet": "查看结果树查看响应有哪几种方法，可通过左侧面板底部的下拉框选择1、Text查看结果树中请求的默认格式为text，会显示请求的取样器结果、请求、响应数据3个部分内容。取样器结果： 默认Raw视图，可以切换为Parsed视图，表单显示更直观。请求：默认Raw视图下，Restquest Body 及Restquest Headers两部分。HTTP显示更直观。输入信息查找，还可以设置区分大小写、正则表达式。响应数据： 显示Response Body 及Response Headers两部分内容。当数据过多时，可通过输入信息搜索，还可以设置区分大小写、正则表达式。2、RegExp Tester当..." }, { "title": "Jmeter 查看结果树之界面功能介绍", "url": "/posts/Jmeter-%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C%E6%A0%91%E4%B9%8B%E7%95%8C%E9%9D%A2%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 11:06:00 +0800", "snippet": "查看结果树显示所有请求响应的树，通过它可以查看任何请求的响应。除了显示响应之外，还可以查看获取响应所花费的时间以及一些响应代码。需要通过”查看结果树”来查看服务器处理请求之后的返回结果，分析是否存在问题注意，查看结果树在负载测试时注意不要使用，因为它会消耗大量资源例如内存和CPU。当我们进行接口功能测试或在测试计划调试验证时使用。当我们测试接口功能的时候，通常只关注到了查看取样器结果、请求及响应数据这3个部分。但“查看结果树”界面还有很多其他功能，你知道吗？一、所有数据写入一个文件文件名：输入一个文件的完整路径，后缀可以为csv，html等。文件可以不存在；若已存在该文件，运行结果选择覆..." }, { "title": "Jmeter 从数据库查询多个字段，依次传给登录接口怎么实现", "url": "/posts/Jmeter-%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5-%E4%BE%9D%E6%AC%A1%E4%BC%A0%E7%BB%99%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 10:37:00 +0800", "snippet": "如果需要查询多个字段，都要传给登录接口该如何操作？例如查询返回的用户名和密码，两个字段传给登录接口一、添加jdbc请求并设置变量，获取数据库多个字段值1、添加好JDBC Connection Configuration并做好数据库连接配置2、导入mysql驱动jar包3、添加线程组–&amp;gt;右键线程组–&amp;gt;添加jdbc request，并做好设置4、添加查看结果树并运行；得到以下结果ps：这里为了举例方便，并未获取密码的值，如果工作中有需要查库获取密码，那么需要找对应开发将密码加密解密的代码部分导出一个jar包，并添加到jmeter的lib/ext下；另外自己添加Be..." }, { "title": "Jmeter 之测试片段、Include Controller、模块控制器应用", "url": "/posts/Jmeter%E4%B9%8B%E6%B5%8B%E8%AF%95%E7%89%87%E6%AE%B5-Include-Controller-%E6%A8%A1%E5%9D%97%E6%8E%A7%E5%88%B6%E5%99%A8%E5%BA%94%E7%94%A8/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 10:27:00 +0800", "snippet": "一、测试片段是什么？应用在控制器上的一个特殊线程组，与线程组处于同一层级，必须与Include Controller或模块控制器一起使用才被执行。二、应用场景1、当jmeter脚本非常复杂的时候，可以通过测试片段分模块管理用例2、当jmeter脚本由多个测试人员共同完成，通过测试片段分人分模块管理用例三、新建测试片段1、右键测试计划-&amp;gt;添加Test Fragment2、在测试片段下，整理好测试用例脚本；3、保存测试片段脚本。选择文件—&amp;gt;保存测试计划为—&amp;gt;保存到本地。4、其他模块整理的用例同理按上面1、2、3步来新建保存。四、使用Include C..." }, { "title": "Jmeter如何把数据库的数据依次获取作为参数传入下一个请求", "url": "/posts/Jmeter%E5%A6%82%E4%BD%95%E6%8A%8A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BE%9D%E6%AC%A1%E8%8E%B7%E5%8F%96%E4%BD%9C%E4%B8%BA%E5%8F%82%E6%95%B0%E4%BC%A0%E5%85%A5%E4%B8%8B%E4%B8%80%E4%B8%AA%E8%AF%B7%E6%B1%82/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 10:18:00 +0800", "snippet": "因为项目的原因，假设我们要实现如下要求： 从数据库的用户表里获取用户信息，并作为参数全部传递给登录请求，分别完成登录操作。一、jmeter连接数据库1、添加JDBC Connection Configuration(右键测试计划–&amp;gt;配置元件–&amp;gt;JDBC Connection Configuration)2、配置数据库连接信息，其中 DataBase URL： jdbc:mysql://192.168.88.130:3306/dataname?useUnicode=true&amp;amp;characterEncoding=utf-8 1）192.168...." }, { "title": "Jmeter逻辑控制器操作", "url": "/posts/Jmeter%E9%80%BB%E8%BE%91%E6%8E%A7%E5%88%B6%E5%99%A8%E6%93%8D%E4%BD%9C/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 10:03:00 +0800", "snippet": "jmeter中的逻辑控制器确定采样器的执行顺序。右键线程组–&amp;gt;添加–&amp;gt;逻辑控制器。一、简单控制器简单控制器对JMeter如何处理添加到其中的采样器没有影响。只是方便我们做分组命名。示例：在以下计划中，向第一个简单控制器添加两个请求：”加载商品搜索页面”和“搜索商品A”，并将控制器命名“挑选商品”；向第二个简单控制器添加另两个请求：”加入购物车”和“支付”，并将控制器命名“支付操作”。运行结果可以看到，简单控制器不会对添加到其中的采样器产生影响。二、循环控制器如果将采样器或逻辑控制器添加到循环控制器，除了为线程组指定的循环值之外，JMeter还将循环它们一定次数..." }, { "title": "Jmeter之https脚本录制", "url": "/posts/Jmeter%E4%B9%8Bhttps%E8%84%9A%E6%9C%AC%E5%BD%95%E5%88%B6/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-09 09:51:00 +0800", "snippet": "jmeter录制脚本时，跟http脚本录制主要区别是，https录制需要添加安全证书。一、jmeter代理服务器及证书配置。1、打开jmeter，右键测试计划添加线程组，右键工作台–&amp;gt;非测试元件–&amp;gt;http代理服务器2、设置http代理服务器。端口默认8888，为了避免跟本地fiddler冲突，改成了8088；目标控制器选择，之前添加好的线程组；排除模式添加 .*\\.(js|css|PNG|jpg|png|gif).* ，过滤掉js、css、png、jpg等信息3、启动代理服务器，会在jmeter的bin目录下生成一个安全证书文件：ApacheJMeterTe..." }, { "title": "Jmeter之正则表达式提取器应用", "url": "/posts/Jmeter%E4%B9%8B%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%8F%90%E5%8F%96%E5%99%A8%E5%BA%94%E7%94%A8/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-08 16:49:00 +0800", "snippet": "说到Jmeter正则表达式提取器的应用，就不得不说到关联。所谓关联，就是把应用中动态变化返回的数据获取到，把它保存为一个参数，提供给后面需要用到的地方进行使用。Jmeter中关联可以通过“添加—后置处理器—正则表达式提取器”来获取数据，且注意正则表达式提取器附在需要获取数据的某个采样器之下，数据一般从“查看结果树“的响应数据获取。一、获取单个数据举例：获取用户列表的结果如下，需要将”mobilephone”:”158****1763” 手机号码取出用来进行登录操作1、在获取用户列表请求下面添加—后置处理器—正则表达式提取器正则表达式提取器说明：Apply to：应用范围要检查的响应字段：..." }, { "title": "Jmeter的几种参数化方式", "url": "/posts/Jmeter%E7%9A%84%E5%87%A0%E7%A7%8D%E5%8F%82%E6%95%B0%E5%8C%96%E6%96%B9%E5%BC%8F/", "categories": "JMeter, 基础", "tags": "JMeter基础", "date": "2021-09-08 16:39:00 +0800", "snippet": "在用到jmeter工具时，无论做接口测试还是性能测试，参数化都是一个必须掌握且非常有用的知识点。参数化的使用场景，例如：1）多个请求都是同一个ip地址，若服务器地址更换了，则脚本需要更改每个请求的ip2）注册账号，不允许账号重复；想批量注册用户时3）模拟多个用户登录，需要用到不同用户信息登录时4）上一个请求的输出结果用于下一个请求的参数传入，例如登录获取到的token信息，用于提交账单请求的参数调用在jmeter中，通过${变量名}来获取参数值。1、用户定义的变量1）线程组右键添加–&amp;gt;配置元件–&amp;gt;用户定义的变量，出现如下设置页面后输入名称、值；注意：名称可以自..." }, { "title": "接口测试理论", "url": "/posts/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%90%86%E8%AE%BA/", "categories": "接口测试, 理论", "tags": "接口测试理论", "date": "2021-09-07 13:36:00 +0800", "snippet": "本节内容 接口及接口测试 网络基础知识：IP,域名, DNS及端口 网络基础知识：OSI七层模型及TCP协议 HTTP协议接口及接口测试这里插播一个段子上图中，程序员口中提到的接口是什么意思呢？手机壳有没有颜色这个属性（功能）？ — 有手机壳有没有提供让程序获取它颜色的途径？ — 没有，这个途径就是接口接口的概念接口又称API（Application Programming Interface,应用程序编程接口），是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。简单概括为以下3点： 程序代码（..." }, { "title": "JMeter中BeanShell的使用方法和常用语法", "url": "/posts/BeanShell%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%92%8C%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/", "categories": "JMeter, BeanShell", "tags": "JMeter, BeanShell", "date": "2021-09-02 16:13:00 +0800", "snippet": "一、什么是BeanShellBeanShell是由java编写的，是一个轻量级的脚本语言，也相当于一个小巧免费的JAVA源码解释器，支持对象式的脚本语言特性，亦可嵌入到JAVA源代码中，能动态执行JAVA源代码并为其扩展了脚本语言的一些特性。二、JMeter中用BeanShell的好处JMeter也是由java编写的，而java运行时需要先编译，然后才可以运行，而BeanShell是一款解释器，直接可能运行源代码；三、BeanShell在JMeter的作用（1）对JMeter的功能的扩展；（2）对jmeter变量的一些操作；四、JMeter中BeanShell常用的基本语法：1、log：..." }, { "title": "RPC与Http的区别", "url": "/posts/RPC%E4%B8%8EHttp%E7%9A%84%E5%8C%BA%E5%88%AB/", "categories": "接口测试, 协议", "tags": "HTTP, RPC", "date": "2021-09-02 13:31:00 +0800", "snippet": "一.远程调用方式无论是微服务还是分布式服务（都是SOA，都是面向服务编程），都面临着服务间的远程调用。那么服务间的远程调用方式有哪些呢？常见的远程调用方式有以下几种： RPC：Remote Produce Call远程过程调用，类似的还有RMI（Remote Methods Invoke 远程方法调用，是JAVA中的概念，是JAVA十三大技术之一）。自定义数据格式，基于原生TCP通信，速度快，效率高。早期的webservice，现在热门的dubbo，都是RPC的典型 RPC的框架：webservie(cxf)、dubbo RMI的框架：hessian..." }, { "title": "三道题套路解决递归问题", "url": "/posts/%E4%B8%89%E9%81%93%E9%A2%98%E5%A5%97%E8%B7%AF%E8%A7%A3%E5%86%B3%E9%80%92%E5%BD%92%E9%97%AE%E9%A2%98/", "categories": "算法, 递归", "tags": "递归", "date": "2021-08-30 09:33:00 +0800", "snippet": "递归解题三部曲何为递归？程序反复调用自身即是递归。我自己在刚开始解决递归问题的时候，总是会去纠结这一层函数做了什么，它调用自身后的下一层函数又做了什么…然后就会觉得实现一个递归解法十分复杂，根本就无从下手。相信很多初学者和我一样，这是一个思维误区，一定要走出来。既然递归是一个反复调用自身的过程，这就说明它每一级的功能都是一样的，因此我们只需要关注一级递归的解决过程即可。如上图所示，我们需要关心的主要是以下三点： 整个递归的终止条件。 一级递归需要做什么？ 应该返回给上一级的返回值是什么？因此，也就有了我们解递归题的三部曲： 找整个递归的终止条件：递归应该在什么时候结束？ 找返回..." }, { "title": "Java形参与实参的区别", "url": "/posts/Java%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/", "categories": "Java资料, 知识", "tags": "Java知识", "date": "2021-08-27 15:24:00 +0800", "snippet": "一、函数中使用：形参出现在函数定义中，在整个函数体内都可以使用， 离开该函数则不能使用。实参出现在主函数中，进入被调函数后，实参变量也不能使用。二、调用形参变量只有在被调用时才分配内存单元，在调用结束时，即刻释放所分配的内存单元。因此，形参只在函数内部有效。函数调用结束返回主调用函数后则不能再使用该形参变量。实参可以是常量、变量、表达式、函数等，无论实参是何种类型的量，在进行函数调用时，它们都必须有确定的值，以便把这些值传送给形参。因此应预先用赋值，输入等办法使参数获得确定值。三、举例 比如你定义一个函数public static int add(int a,int b)，这里的a和b..." }, { "title": "django的model中 unicode 与 str", "url": "/posts/django%E4%B8%ADmodel%E7%9A%84str%E6%96%B9%E6%B3%95/", "categories": "Django, model", "tags": "Django", "date": "2021-08-26 15:50:00 +0800", "snippet": "django的model中 def __unicode__(self): 与 def __str__(self): 做什么用的在Django中，Python3只能用__str__方法，Python2就使用__unicode__方法。因为更安全一些。这个__str__的作用是美化打印出来的结果，使人类更方便查看。看下面例子，如果没有__str__方法，打印的结果是&amp;lt;__main__.Test object at 0x0000022D6D1387B8&amp;gt;格式，有了__str__方法后，打印时会按照__str__定义的格式来打印，打印结果为Name:xiaomingc..." }, { "title": "SpringBoot题库-1", "url": "/posts/SpringBoot%E9%9D%A2%E8%AF%95%E9%A2%98-1/", "categories": "面试, Springboot", "tags": "Springboot", "date": "2021-08-25 14:45:00 +0800", "snippet": "网络上找的一些SpringBoot相关题目1、什么是SpringBoot？ 用来简化Spring应用的初始搭建以及开发过程，使用特定的方式来进行配置 创建独立的Spring引用程序main方法运行 嵌入的tomcat无需部署war文件 简化maven配置 自动配置Spring添加对应的功能starter自动化配置 SpringBoot来简化Spring应用开发，约定大于配置，去繁化简2、SpringBoot有哪些优缺点？优点 独立运行 Spring Boot 而且内嵌了各种 servlet 容器，Tomcat、Jetty 等，现在不再需要打成war 包部署到容..." }, { "title": "Java题库-下", "url": "/posts/Java%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%8B/", "categories": "面试, Java", "tags": "Java", "date": "2021-08-25 13:37:00 +0800", "snippet": "这部分主要是开源Java EE框架方面的内容，包括Hibernate、MyBatis、Spring、Spring MVC等，由于Struts 2已经是明日黄花，在这里就不讨论Struts 2的面试题，如果需要了解相关内容，可以参考文章《Java面试题集（86-115）》 。此外，这篇文章还对企业应用架构、大型网站架构和应用服务器优化等内容进行了简单的探讨，这些内容相信对面试会很有帮助。126、什么是ORM？答：对象关系映射（Object-Relational Mapping，简称ORM）是一种为了解决程序的面向对象模型与数据库的关系模型互不匹配问题的技术；简单的说，ORM是通过使用描述对..." }, { "title": "Java题库-中", "url": "/posts/Java%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%AD/", "categories": "面试, Java", "tags": "Java", "date": "2021-08-24 15:56:00 +0800", "snippet": "这部分主要是与Java Web和Web Service相关的面试题。96、阐述Servlet和CGI的区别?答：Servlet与CGI的区别在于Servlet处于服务器进程中，它通过多线程方式运行其service()方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于Servlet。 补充：Sun Microsystems公司在1996年发布Servlet技术就是为了和CGI进行竞争，Servlet是一个特殊的Java程序，一个基于Java的Web应用通常包含一个或多个Servlet类。Servlet不能够自行创建..." }, { "title": "Java题库-上", "url": "/posts/Java%E9%9D%A2%E8%AF%95%E9%A2%98-%E4%B8%8A/", "categories": "面试, Java", "tags": "Java", "date": "2021-08-24 14:08:00 +0800", "snippet": "1、面向对象的特征有哪些方面？答：面向对象的特征主要有以下几个方面： 抽象：抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。 继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的重要手段（如果不能理解请阅读阎宏博士的《Java与模式》或《设计模式精解》中关于桥梁模式的部分）。 封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通..." }, { "title": "GitHub提交代码报port22错误", "url": "/posts/GitHub%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E6%8A%A5port22/", "categories": "GitHub, GitHub问题与解决", "tags": "GitHub", "date": "2021-08-20 14:33:00 +0800", "snippet": "问题Git克隆提交出现 ssh connect to host github.com port 22 Operation timed outssh协议 从GitHub克隆自己的代码时，报错如下：Cloning into &#39;retrofit2-gson-convert&#39;...ssh_dispatch_run_fatal: Connection to 52.74.223.119 port 22: Operation timed outfatal: Could not read from remote repository.Please make sure you have t..." }, { "title": "Jekyll 本地预览中文路径问题解决", "url": "/posts/%E6%9C%AC%E5%9C%B0%E9%A2%84%E8%A7%88%E4%B8%AD%E6%96%87%E8%B7%AF%E5%BE%84/", "categories": "安装, 博客, Jekyll问题与解决", "tags": "jekyll", "date": "2021-08-20 13:36:00 +0800", "snippet": " Jekyll 本地预览中文路径问题解决 问题本地预览时，若 markdown 文件名是中文的，会无法访问该文章（Markdown文件）（跳转到 Jekyll 404 页面）解决修改 Ruby 的 filehandler.rb 文件，若害怕误操作可以先备份。使用 which ruby 来查看ruby安装路径。找到下方两段代码，并加入指定代码 第一处path = req.path_info.dup.force_encoding(Encoding.find(&quot;filesystem&quot;)path.force_encoding(&quot;UTF-8&quot;) #..." }, { "title": "一些Jekyll资料", "url": "/posts/jekyll%E8%B5%84%E6%96%99/", "categories": "安装, 博客", "tags": "jekyll", "date": "2021-08-20 13:17:00 +0800", "snippet": "参考资料 开源的模板语言liquid Jekyll语法简单笔记" }, { "title": "Chirpy Jekyll主题安装", "url": "/posts/jekyll-theme-chirpy%E5%AE%89%E8%A3%85/", "categories": "安装, 博客", "tags": "jekyll", "date": "2021-08-20 10:43:00 +0800", "snippet": " EN | 中文 (简体) Chirpy Jekyll Theme 一个采用了最简化、侧边栏、响应式设计的 Jekyll 主题，专注于文本展示，旨在帮助您轻松地记录和分享知识。在线体验 » 功能一览 本地化外观语言 可配置的主题颜色 文章置顶 文章最后修改日期 文章目录 自动推荐相关文章 语法高亮 二级目录 数学表达式 Mermaid 图表 搜索 Atom 订阅 Disqus 评论 Google 分析 GA 浏览报告（高级功能） SEO 优化 网站性能优化前提要求参考 Jekyll Docs 安装 Ruby，RubyGems，J..." } ]
